name: PostgreSQL service example
on: push

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.3-alpine
#        env:
#          POSTGRES_USER: grai
#          POSTGRES_PASSWORD: grai
#          POSTGRES_DB: grai
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: |
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
    steps:
      - uses: actions/checkout@v3

      - run: |
          sudo apt update
          sudo apt install -y postgresql-client
      - run: pg_isready -h 127.0.0.1 -p 5432 # -d grai -U grai
#
#jobs:
#  # Label of the container job
#  container-job:
#    # Containers must run in Linux based operating systems
#    runs-on: ubuntu-latest
#    # Docker Hub image that `container-job` executes in
##    container: node:10.18-jessie
#
#    # Service containers to run with `container-job`
#    services:
#      # Label used to access the service container
#      postgres:
#        # Docker Hub image
#        image: postgres
#        # Provide the password for postgres
#        env:
#          POSTGRES_USER: grai
#          POSTGRES_PASSWORD: grai
#          POSTGRES_DB: grai
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#      # Downloads a copy of the code in your repository before running CI tests
#      - name: Check out repository code
#        uses: actions/checkout@v3
#
#      - run: |
#          sudo apt update
#          sudo apt install -y postgresql-client
#
#      - run: pg_isready -d grai -h localhost -p 5432 -U grai
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: 3.10
#
#      - name: Install package
#        working-directory: "grai-server/app"
#        run: |
#          pip install pytest pytest-django
#          pip install .
#  #
#      - name: Tests
#        env:
#          DEBUG: False
#          DB_HOST: '127.0.0.1'
#          DB_PORT: '5432'
#          DB_USER: grai
#          DB_NAME: grai
#          DB_PASSWORD: grai
#        working-directory: "grai-server/app"
#        run: |
#          python manage.py migrate --noinput
#          pytest
      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Connect to PostgreSQL
#        # Runs a script that creates a PostgreSQL table, populates
#        # the table with data, and then retrieves the data.
#        run: node client.js
#        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
#        env:
#          # The hostname used to communicate with the PostgreSQL service container
#          POSTGRES_HOST: postgres
#          # The default PostgreSQL port
#          POSTGRES_PORT: 5432

#name: Docker Compose Actions Workflow
#on:
#  push:
#    paths:
#    - "grai-server/**"
#
#env:
#  py_ver: "3.10"
#  poetry_ver: "1.2.2"
#
#
#jobs:
#  lint-grai-server:
#    runs-on: ubuntu-latest
##
#    steps:
#    - name: Check out Git repository
#      uses: actions/checkout@v3
#
##    - name: Install Python
##      id: setup-python
##      uses: actions/setup-python@v4
##      with:
##        python-version: "${{ env.py_ver }}"
##
##    - run: pip install black isort
##
##    - working-directory: "grai-server/app"
##      run: |
##        black . --check
##        isort . --profile black
#
#  test-grai-server:
#    needs: lint-grai-server
#    runs-on: ubuntu-latest
#    defaults:
#        run:
#          working-directory: ./grai-server
#    services:
#      postgres:
#        image: postgres:latest
#        env:
##          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
##          POSTGRES_DB: postgres
#        ports:
#        - 5432:5432
#        # needed because the postgres container does not provide a healthcheck
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    env:
#      DJANGO_SETTINGS_MODULE: "the_guide.settings"
#
#    steps:
#    - uses: actions/checkout@v3
#    - run: |
#        sudo apt update
#        sudo apt install -y postgresql-client
#    - run: pg_isready -d postgres -h localhost -p 5432 -U postgres
    
#    - uses: actions/setup-python@v4
#      with:
#        python-version: "${{ env.py_ver }}"
#    - name: Install package
#      working-directory: "grai-server/app"
#      run: |
#        pip install pytest pytest-django
#        pip install .
##
#    - name: Tests
#      env:
#        DEBUG: False
#        DB_HOST: '127.0.0.1'
#        DB_PORT: '5432'
#        DB_USER: postgres
#        DB_NAME: postgres
#        DB_PASSWORD: postgres
#      working-directory: "grai-server/app"
#      run: |
#        python manage.py migrate --noinput
#        pytest
#

#    - name: Run Migrations
#      run: poetry run python manage.py migrate --noinput
#
#    - name: Test
#      working-directory: "grai-server/app"
#      run: poetry run pytest


#    - name: cache poetry install
#      uses: actions/cache@v2
#      with:
#        path: ~/.local
#        key: poetry-1.2.2-0
#
#    - name: Install Poetry
#      uses: snok/install-poetry@v1
#      with:
#        version: 1.2.2
#        virtualenvs-create: true
#        virtualenvs-in-project: true
#
#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache
#        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#
#    - name: Install dependencies
#      working-directory: "grai-server/app"
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      run: poetry install --no-interaction --no-root